@model RecipeHelperApp.ViewModels.RecipeDTO

@{
    ViewData["Title"] = "Generate";
}

<h1>Reset</h1>

<h3>Are you sure you want to generate a recipe in this recipe slot's place?</h3>
<div>
    <h4>Recipe</h4>
    <hr />
    <form asp-action="Generate" id="recipeForm">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <input type="hidden" asp-for="DayId" />

        <dl class="row">
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.MealType)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.MealType)
                <input type="hidden" asp-for="MealType" />
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Name)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Name)
                <input type="hidden" asp-for="Name" />
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Description)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Description)
                <input type="hidden" asp-for="Description" />
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Instructions)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Instructions)
                <input type="hidden" asp-for="Instructions" />
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Ingredients)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Ingredients)
                <input type="hidden" asp-for="Ingredients" />
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Calories)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Calories)
                <input type="hidden" asp-for="Calories" />
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Protein)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Protein)
                <input type="hidden" asp-for="Protein" />
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Fat)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Fat)
                <input type="hidden" asp-for="Fat" />
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Carbs)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Carbs)
                <input type="hidden" asp-for="Carbs" />
            </dd>
        </dl>

        @if (!ViewData.ModelState.IsValid)
        {
            <div class="alert alert-danger" role="alert">
                @foreach (var error in ViewData.ModelState.Values.SelectMany(x => x.Errors))
                {
                    <span>@error.ErrorMessage</span>
                    <br />
                }
            </div>
        }


        <div class="form-group" id="submit-button-group">
            <input type="submit" value="Generate" class="btn btn-success" />
        </div>

        <partial name="_LoadingButtonPartial" message="Generating your recipe, please stand by..." />

    </form>
</div>

<div>
    <a href="@Url.Action("Index", "Recipes", new { dayId = Model.DayId })">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}